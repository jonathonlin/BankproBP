// <auto-generated />
using System;
using BankproBPData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BankproBPApi.Migrations
{
    [DbContext(typeof(BankproBpDbContext))]
    partial class BankproBpDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BankproBPData.AccountPayable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ApAmount")
                        .HasColumnType("decimal");

                    b.Property<string>("ApNo")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("ApStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("YearMonth")
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.ToTable("AccountPayable");
                });

            modelBuilder.Entity("BankproBPData.AccountPayableDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountPayableId")
                        .HasColumnType("int");

                    b.Property<string>("ApNo")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AccountPayableId");

                    b.ToTable("AccountPayableDetail");
                });

            modelBuilder.Entity("BankproBPData.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a8f9d46-702b-4dee-ad4c-1006ad48a216",
                            Email = "jonathon0418@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JONATHON0418@GMAIL>COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHDf2TydATz053YHVbrSI3t1htg0HF7xVerEhblU3C9WLskqZitt/fNNKWN1JRGKKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("BankproBPData.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankCode")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("BankproBPData.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Tel")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "台北市松山區南京東路三段261號7樓",
                            CompanyName = "金財通",
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 623, DateTimeKind.Utc).AddTicks(8241),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            Email = "",
                            Tel = "02-87121298",
                            ZipCode = "105"
                        });
                });

            modelBuilder.Entity("BankproBPData.CompanyBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccount")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankCode")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CompanyBankAtmId")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyBankAccount");
                });

            modelBuilder.Entity("BankproBPData.CompanyProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProgramType")
                        .HasColumnType("int");

                    b.Property<string>("ProgramUrl")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("CompanyProgram");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 623, DateTimeKind.Utc).AddTicks(9809),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramName = "系統維護",
                            ProgramType = 0,
                            Sort = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(121),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 1,
                            ProgramName = "使用者維護",
                            ProgramType = 1,
                            ProgramUrl = "sys/register",
                            Sort = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(124),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 1,
                            ProgramName = "角色維護",
                            ProgramType = 1,
                            ProgramUrl = "sys/role",
                            Sort = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(125),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 1,
                            ProgramName = "使用者角色維護",
                            ProgramType = 1,
                            ProgramUrl = "sys/userrole",
                            Sort = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(127),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 1,
                            ProgramName = "程式維護",
                            ProgramType = 1,
                            ProgramUrl = "sys/program",
                            Sort = 5,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(128),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 1,
                            ProgramName = "程式按鈕維護",
                            ProgramType = 1,
                            ProgramUrl = "sys/programbutton",
                            Sort = 6,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(130),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 1,
                            ProgramName = "權限維護",
                            ProgramType = 1,
                            ProgramUrl = "sys/programsetting",
                            Sort = 7,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(131),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 1,
                            ProgramName = "修改密碼",
                            ProgramType = 1,
                            ProgramUrl = "sys/changepassword",
                            Sort = 8,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(133),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramName = "基本資料維護",
                            ProgramType = 0,
                            Sort = 9,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(135),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 9,
                            ProgramName = "銀行維護",
                            ProgramType = 1,
                            ProgramUrl = "basic/bank",
                            Sort = 10,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(137),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 9,
                            ProgramName = "公司維護",
                            ProgramType = 1,
                            ProgramUrl = "basic/company",
                            Sort = 11,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(138),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 9,
                            ProgramName = "公司銀行帳戶維護",
                            ProgramType = 1,
                            ProgramUrl = "basic/companybank",
                            Sort = 12,
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(139),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 9,
                            ProgramName = "客戶維護",
                            ProgramType = 1,
                            ProgramUrl = "basic/customer",
                            Sort = 13,
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(141),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 9,
                            ProgramName = "客戶銀行帳戶維護",
                            ProgramType = 1,
                            ProgramUrl = "basic/customerbank",
                            Sort = 14,
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(142),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramName = "應付帳款",
                            ProgramType = 0,
                            Sort = 15,
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(143),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ParentId = 15,
                            ProgramName = "應付立帳",
                            ProgramType = 1,
                            ProgramUrl = "payable/ap",
                            Sort = 16,
                            Status = 1
                        });
                });

            modelBuilder.Entity("BankproBPData.CompanyProgramButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ButtonAction")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ButtonText")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CompanyProgramId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProgramId");

                    b.ToTable("CompanyProgramButton");
                });

            modelBuilder.Entity("BankproBPData.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Mobile")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Tel")
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BankproBPData.CustomerBankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AllowDiffAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankAccount")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BankCode")
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerBankAccount");
                });

            modelBuilder.Entity("BankproBPData.FormNoCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<string>("FormType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormNoCount");
                });

            modelBuilder.Entity("BankproBPData.PGParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("KeyCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("KeyName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("KeyValue")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("PGParameter");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(2877),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "APStatus",
                            KeyName = "立帳",
                            KeyValue = 1010,
                            Sort = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3051),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "APStatus",
                            KeyName = "銷帳",
                            KeyValue = 1020,
                            Sort = 2
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3052),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "APStatus",
                            KeyName = "呆帳",
                            KeyValue = 1030,
                            Sort = 3
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3054),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "APStatus",
                            KeyName = "結帳",
                            KeyValue = 1040,
                            Sort = 4
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3055),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "PaymentType",
                            KeyName = "信用卡-CTBC",
                            KeyValue = 2101,
                            Sort = 1
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3056),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "PaymentType",
                            KeyName = "ATM-CTBC",
                            KeyValue = 2201,
                            Sort = 2
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3058),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "PaymentType",
                            KeyName = "ATM-ESUN",
                            KeyValue = 2202,
                            Sort = 3
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3060),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "PaymentType",
                            KeyName = "ATM-HNCB",
                            KeyValue = 2203,
                            Sort = 4
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3061),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "PrepaymentUseType",
                            KeyName = "沖帳",
                            KeyValue = 3100,
                            Sort = 1
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3063),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "PrepaymentUseType",
                            KeyName = "退費",
                            KeyValue = 3200,
                            Sort = 2
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3064),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "AccountType",
                            KeyName = "公司帳戶",
                            KeyValue = 1,
                            Sort = 1
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(3065),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            KeyCode = "AccountType",
                            KeyName = "客戶帳戶",
                            KeyValue = 2,
                            Sort = 2
                        });
                });

            modelBuilder.Entity("BankproBPData.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ButtonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1468),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1636),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1638),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1639),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1640),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1641),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1642),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1643),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1644),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1645),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1645),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 11,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1646),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 12,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1647),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 13,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1648),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 14,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1649),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 15,
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 624, DateTimeKind.Utc).AddTicks(1650),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            ProgramId = 16,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("BankproBPData.ProgramRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ProgramRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 623, DateTimeKind.Utc).AddTicks(5448),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            RoleName = "admin",
                            Status = 1
                        });
                });

            modelBuilder.Entity("BankproBPData.ProgramUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CreateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("ProgramUser");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Account = "admin",
                            AccountType = 1,
                            AspNetUserId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            CompanyId = 1,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 623, DateTimeKind.Utc).AddTicks(4186),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            Email = "jonathon0418@gmail.com",
                            Status = 1,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("BankproBPData.ProgramUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProgramRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("ProgramUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProgramRoleId");

                    b.HasIndex("ProgramUserId");

                    b.ToTable("ProgramUserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2021, 6, 1, 7, 53, 13, 623, DateTimeKind.Utc).AddTicks(6577),
                            CreateId = "8e6ab833-52e1-49dc-942a-d7d5c0f40968",
                            RoleId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BankproBPData.AccountPayableDetail", b =>
                {
                    b.HasOne("BankproBPData.AccountPayable", "AccountPayable")
                        .WithMany("AccountPayableDetails")
                        .HasForeignKey("AccountPayableId");

                    b.Navigation("AccountPayable");
                });

            modelBuilder.Entity("BankproBPData.CompanyBankAccount", b =>
                {
                    b.HasOne("BankproBPData.Company", "Company")
                        .WithMany("CompanyBankAccounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BankproBPData.CompanyProgramButton", b =>
                {
                    b.HasOne("BankproBPData.CompanyProgram", "CompanyProgram")
                        .WithMany("CompanyProgramButtons")
                        .HasForeignKey("CompanyProgramId");

                    b.Navigation("CompanyProgram");
                });

            modelBuilder.Entity("BankproBPData.Customer", b =>
                {
                    b.HasOne("BankproBPData.Company", "Company")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BankproBPData.CustomerBankAccount", b =>
                {
                    b.HasOne("BankproBPData.Customer", "Customer")
                        .WithMany("CustomerBankAccounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BankproBPData.ProgramUser", b =>
                {
                    b.HasOne("BankproBPData.Company", "Company")
                        .WithMany("ProgramUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BankproBPData.ProgramUserRole", b =>
                {
                    b.HasOne("BankproBPData.ProgramRole", "ProgramRole")
                        .WithMany("ProgramUserRoles")
                        .HasForeignKey("ProgramRoleId");

                    b.HasOne("BankproBPData.ProgramUser", "ProgramUser")
                        .WithMany("ProgramUserRoles")
                        .HasForeignKey("ProgramUserId");

                    b.Navigation("ProgramRole");

                    b.Navigation("ProgramUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BankproBPData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BankproBPData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankproBPData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BankproBPData.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankproBPData.AccountPayable", b =>
                {
                    b.Navigation("AccountPayableDetails");
                });

            modelBuilder.Entity("BankproBPData.Company", b =>
                {
                    b.Navigation("CompanyBankAccounts");

                    b.Navigation("Customers");

                    b.Navigation("ProgramUsers");
                });

            modelBuilder.Entity("BankproBPData.CompanyProgram", b =>
                {
                    b.Navigation("CompanyProgramButtons");
                });

            modelBuilder.Entity("BankproBPData.Customer", b =>
                {
                    b.Navigation("CustomerBankAccounts");
                });

            modelBuilder.Entity("BankproBPData.ProgramRole", b =>
                {
                    b.Navigation("ProgramUserRoles");
                });

            modelBuilder.Entity("BankproBPData.ProgramUser", b =>
                {
                    b.Navigation("ProgramUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
